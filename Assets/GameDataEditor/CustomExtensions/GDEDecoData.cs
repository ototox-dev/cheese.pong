// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEDecoData : IGDEData
    {
        static string raceNameKey = "raceName";
		string _raceName;
        public string raceName
        {
            get { return _raceName; }
            set {
                if (_raceName != value)
                {
                    _raceName = value;
					GDEDataManager.SetString(_key, raceNameKey, _raceName);
                }
            }
        }

        static string typeNameKey = "typeName";
		string _typeName;
        public string typeName
        {
            get { return _typeName; }
            set {
                if (_typeName != value)
                {
                    _typeName = value;
					GDEDataManager.SetString(_key, typeNameKey, _typeName);
                }
            }
        }

        static string shapePathKey = "shapePath";
		string _shapePath;
        public string shapePath
        {
            get { return _shapePath; }
            set {
                if (_shapePath != value)
                {
                    _shapePath = value;
					GDEDataManager.SetString(_key, shapePathKey, _shapePath);
                }
            }
        }

        public GDEDecoData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Deco");
			
            dict.Merge(true, raceName.ToGDEDict(raceNameKey));
            dict.Merge(true, typeName.ToGDEDict(typeNameKey));
            dict.Merge(true, shapePath.ToGDEDict(shapePathKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetString(raceNameKey, out _raceName);
                dict.TryGetString(typeNameKey, out _typeName);
                dict.TryGetString(shapePathKey, out _shapePath);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _raceName = GDEDataManager.GetString(_key, raceNameKey, _raceName);
            _typeName = GDEDataManager.GetString(_key, typeNameKey, _typeName);
            _shapePath = GDEDataManager.GetString(_key, shapePathKey, _shapePath);
        }

        public GDEDecoData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEDecoData newClone = new GDEDecoData(newKey);

            newClone.raceName = raceName;
            newClone.typeName = typeName;
            newClone.shapePath = shapePath;

            return newClone;
		}

        public GDEDecoData DeepClone()
		{
			GDEDecoData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_raceName()
        {
            GDEDataManager.ResetToDefault(_key, raceNameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(raceNameKey, out _raceName);
        }

        public void Reset_typeName()
        {
            GDEDataManager.ResetToDefault(_key, typeNameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(typeNameKey, out _typeName);
        }

        public void Reset_shapePath()
        {
            GDEDataManager.ResetToDefault(_key, shapePathKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(shapePathKey, out _shapePath);
        }

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, raceNameKey);
            GDEDataManager.ResetToDefault(_key, typeNameKey);
            GDEDataManager.ResetToDefault(_key, shapePathKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
