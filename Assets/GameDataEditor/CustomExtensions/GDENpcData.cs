// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDENpcData : IGDEData
    {
        static string isObstacleKey = "isObstacle";
		bool _isObstacle;
        public bool isObstacle
        {
            get { return _isObstacle; }
            set {
                if (_isObstacle != value)
                {
                    _isObstacle = value;
					GDEDataManager.SetBool(_key, isObstacleKey, _isObstacle);
                }
            }
        }

        static string scaleByWeightKey = "scaleByWeight";
		bool _scaleByWeight;
        public bool scaleByWeight
        {
            get { return _scaleByWeight; }
            set {
                if (_scaleByWeight != value)
                {
                    _scaleByWeight = value;
					GDEDataManager.SetBool(_key, scaleByWeightKey, _scaleByWeight);
                }
            }
        }

        static string spawnHeightKey = "spawnHeight";
		int _spawnHeight;
        public int spawnHeight
        {
            get { return _spawnHeight; }
            set {
                if (_spawnHeight != value)
                {
                    _spawnHeight = value;
					GDEDataManager.SetInt(_key, spawnHeightKey, _spawnHeight);
                }
            }
        }

        static string healthPointKey = "healthPoint";
		int _healthPoint;
        public int healthPoint
        {
            get { return _healthPoint; }
            set {
                if (_healthPoint != value)
                {
                    _healthPoint = value;
					GDEDataManager.SetInt(_key, healthPointKey, _healthPoint);
                }
            }
        }

        static string atkBonusKey = "atkBonus";
		int _atkBonus;
        public int atkBonus
        {
            get { return _atkBonus; }
            set {
                if (_atkBonus != value)
                {
                    _atkBonus = value;
					GDEDataManager.SetInt(_key, atkBonusKey, _atkBonus);
                }
            }
        }

        static string defBonusKey = "defBonus";
		int _defBonus;
        public int defBonus
        {
            get { return _defBonus; }
            set {
                if (_defBonus != value)
                {
                    _defBonus = value;
					GDEDataManager.SetInt(_key, defBonusKey, _defBonus);
                }
            }
        }

        static string dmgClampMinKey = "dmgClampMin";
		int _dmgClampMin;
        public int dmgClampMin
        {
            get { return _dmgClampMin; }
            set {
                if (_dmgClampMin != value)
                {
                    _dmgClampMin = value;
					GDEDataManager.SetInt(_key, dmgClampMinKey, _dmgClampMin);
                }
            }
        }

        static string dmgClampMaxKey = "dmgClampMax";
		int _dmgClampMax;
        public int dmgClampMax
        {
            get { return _dmgClampMax; }
            set {
                if (_dmgClampMax != value)
                {
                    _dmgClampMax = value;
					GDEDataManager.SetInt(_key, dmgClampMaxKey, _dmgClampMax);
                }
            }
        }

        static string dmgCountKey = "dmgCount";
		int _dmgCount;
        public int dmgCount
        {
            get { return _dmgCount; }
            set {
                if (_dmgCount != value)
                {
                    _dmgCount = value;
					GDEDataManager.SetInt(_key, dmgCountKey, _dmgCount);
                }
            }
        }

        static string weightKey = "weight";
		float _weight;
        public float weight
        {
            get { return _weight; }
            set {
                if (_weight != value)
                {
                    _weight = value;
					GDEDataManager.SetFloat(_key, weightKey, _weight);
                }
            }
        }

        static string speedBonusKey = "speedBonus";
		float _speedBonus;
        public float speedBonus
        {
            get { return _speedBonus; }
            set {
                if (_speedBonus != value)
                {
                    _speedBonus = value;
					GDEDataManager.SetFloat(_key, speedBonusKey, _speedBonus);
                }
            }
        }

        static string visionRangeKey = "visionRange";
		float _visionRange;
        public float visionRange
        {
            get { return _visionRange; }
            set {
                if (_visionRange != value)
                {
                    _visionRange = value;
					GDEDataManager.SetFloat(_key, visionRangeKey, _visionRange);
                }
            }
        }

        static string atkRangeKey = "atkRange";
		float _atkRange;
        public float atkRange
        {
            get { return _atkRange; }
            set {
                if (_atkRange != value)
                {
                    _atkRange = value;
					GDEDataManager.SetFloat(_key, atkRangeKey, _atkRange);
                }
            }
        }

        static string atkSpeedKey = "atkSpeed";
		float _atkSpeed;
        public float atkSpeed
        {
            get { return _atkSpeed; }
            set {
                if (_atkSpeed != value)
                {
                    _atkSpeed = value;
					GDEDataManager.SetFloat(_key, atkSpeedKey, _atkSpeed);
                }
            }
        }

        static string weightRobRateKey = "weightRobRate";
		float _weightRobRate;
        public float weightRobRate
        {
            get { return _weightRobRate; }
            set {
                if (_weightRobRate != value)
                {
                    _weightRobRate = value;
					GDEDataManager.SetFloat(_key, weightRobRateKey, _weightRobRate);
                }
            }
        }

        static string aggroKey = "aggro";
		float _aggro;
        public float aggro
        {
            get { return _aggro; }
            set {
                if (_aggro != value)
                {
                    _aggro = value;
					GDEDataManager.SetFloat(_key, aggroKey, _aggro);
                }
            }
        }

        static string counterKey = "counter";
		float _counter;
        public float counter
        {
            get { return _counter; }
            set {
                if (_counter != value)
                {
                    _counter = value;
					GDEDataManager.SetFloat(_key, counterKey, _counter);
                }
            }
        }

        static string reflectKey = "reflect";
		float _reflect;
        public float reflect
        {
            get { return _reflect; }
            set {
                if (_reflect != value)
                {
                    _reflect = value;
					GDEDataManager.SetFloat(_key, reflectKey, _reflect);
                }
            }
        }

        static string stunKey = "stun";
		float _stun;
        public float stun
        {
            get { return _stun; }
            set {
                if (_stun != value)
                {
                    _stun = value;
					GDEDataManager.SetFloat(_key, stunKey, _stun);
                }
            }
        }

        static string criticalKey = "critical";
		float _critical;
        public float critical
        {
            get { return _critical; }
            set {
                if (_critical != value)
                {
                    _critical = value;
					GDEDataManager.SetFloat(_key, criticalKey, _critical);
                }
            }
        }

        static string poisonKey = "poison";
		float _poison;
        public float poison
        {
            get { return _poison; }
            set {
                if (_poison != value)
                {
                    _poison = value;
					GDEDataManager.SetFloat(_key, poisonKey, _poison);
                }
            }
        }

        static string bleedKey = "bleed";
		float _bleed;
        public float bleed
        {
            get { return _bleed; }
            set {
                if (_bleed != value)
                {
                    _bleed = value;
					GDEDataManager.SetFloat(_key, bleedKey, _bleed);
                }
            }
        }

        static string slowKey = "slow";
		float _slow;
        public float slow
        {
            get { return _slow; }
            set {
                if (_slow != value)
                {
                    _slow = value;
					GDEDataManager.SetFloat(_key, slowKey, _slow);
                }
            }
        }

        static string pierceKey = "pierce";
		float _pierce;
        public float pierce
        {
            get { return _pierce; }
            set {
                if (_pierce != value)
                {
                    _pierce = value;
					GDEDataManager.SetFloat(_key, pierceKey, _pierce);
                }
            }
        }

        static string flameKey = "flame";
		float _flame;
        public float flame
        {
            get { return _flame; }
            set {
                if (_flame != value)
                {
                    _flame = value;
					GDEDataManager.SetFloat(_key, flameKey, _flame);
                }
            }
        }

        static string typeNameKey = "typeName";
		string _typeName;
        public string typeName
        {
            get { return _typeName; }
            set {
                if (_typeName != value)
                {
                    _typeName = value;
					GDEDataManager.SetString(_key, typeNameKey, _typeName);
                }
            }
        }

        static string nickNameKey = "nickName";
		string _nickName;
        public string nickName
        {
            get { return _nickName; }
            set {
                if (_nickName != value)
                {
                    _nickName = value;
					GDEDataManager.SetString(_key, nickNameKey, _nickName);
                }
            }
        }

        static string spawnLevelKey = "spawnLevel";
		string _spawnLevel;
        public string spawnLevel
        {
            get { return _spawnLevel; }
            set {
                if (_spawnLevel != value)
                {
                    _spawnLevel = value;
					GDEDataManager.SetString(_key, spawnLevelKey, _spawnLevel);
                }
            }
        }

        static string shapePathKey = "shapePath";
		string _shapePath;
        public string shapePath
        {
            get { return _shapePath; }
            set {
                if (_shapePath != value)
                {
                    _shapePath = value;
					GDEDataManager.SetString(_key, shapePathKey, _shapePath);
                }
            }
        }

        static string animPathKey = "animPath";
		string _animPath;
        public string animPath
        {
            get { return _animPath; }
            set {
                if (_animPath != value)
                {
                    _animPath = value;
					GDEDataManager.SetString(_key, animPathKey, _animPath);
                }
            }
        }

        static string fsmPathKey = "fsmPath";
		string _fsmPath;
        public string fsmPath
        {
            get { return _fsmPath; }
            set {
                if (_fsmPath != value)
                {
                    _fsmPath = value;
					GDEDataManager.SetString(_key, fsmPathKey, _fsmPath);
                }
            }
        }

        static string localScaleKey = "localScale";
		Vector3 _localScale;
        public Vector3 localScale
        {
            get { return _localScale; }
            set {
                if (_localScale != value)
                {
                    _localScale = value;
					GDEDataManager.SetVector3(_key, localScaleKey, _localScale);
                }
            }
        }

        public GDENpcData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Npc");
			
            dict.Merge(true, isObstacle.ToGDEDict(isObstacleKey));
            dict.Merge(true, scaleByWeight.ToGDEDict(scaleByWeightKey));
            dict.Merge(true, spawnHeight.ToGDEDict(spawnHeightKey));
            dict.Merge(true, healthPoint.ToGDEDict(healthPointKey));
            dict.Merge(true, atkBonus.ToGDEDict(atkBonusKey));
            dict.Merge(true, defBonus.ToGDEDict(defBonusKey));
            dict.Merge(true, dmgClampMin.ToGDEDict(dmgClampMinKey));
            dict.Merge(true, dmgClampMax.ToGDEDict(dmgClampMaxKey));
            dict.Merge(true, dmgCount.ToGDEDict(dmgCountKey));
            dict.Merge(true, weight.ToGDEDict(weightKey));
            dict.Merge(true, speedBonus.ToGDEDict(speedBonusKey));
            dict.Merge(true, visionRange.ToGDEDict(visionRangeKey));
            dict.Merge(true, atkRange.ToGDEDict(atkRangeKey));
            dict.Merge(true, atkSpeed.ToGDEDict(atkSpeedKey));
            dict.Merge(true, weightRobRate.ToGDEDict(weightRobRateKey));
            dict.Merge(true, aggro.ToGDEDict(aggroKey));
            dict.Merge(true, counter.ToGDEDict(counterKey));
            dict.Merge(true, reflect.ToGDEDict(reflectKey));
            dict.Merge(true, stun.ToGDEDict(stunKey));
            dict.Merge(true, critical.ToGDEDict(criticalKey));
            dict.Merge(true, poison.ToGDEDict(poisonKey));
            dict.Merge(true, bleed.ToGDEDict(bleedKey));
            dict.Merge(true, slow.ToGDEDict(slowKey));
            dict.Merge(true, pierce.ToGDEDict(pierceKey));
            dict.Merge(true, flame.ToGDEDict(flameKey));
            dict.Merge(true, typeName.ToGDEDict(typeNameKey));
            dict.Merge(true, nickName.ToGDEDict(nickNameKey));
            dict.Merge(true, spawnLevel.ToGDEDict(spawnLevelKey));
            dict.Merge(true, shapePath.ToGDEDict(shapePathKey));
            dict.Merge(true, animPath.ToGDEDict(animPathKey));
            dict.Merge(true, fsmPath.ToGDEDict(fsmPathKey));
            dict.Merge(true, localScale.ToGDEDict(localScaleKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBool(isObstacleKey, out _isObstacle);
                dict.TryGetBool(scaleByWeightKey, out _scaleByWeight);
                dict.TryGetInt(spawnHeightKey, out _spawnHeight);
                dict.TryGetInt(healthPointKey, out _healthPoint);
                dict.TryGetInt(atkBonusKey, out _atkBonus);
                dict.TryGetInt(defBonusKey, out _defBonus);
                dict.TryGetInt(dmgClampMinKey, out _dmgClampMin);
                dict.TryGetInt(dmgClampMaxKey, out _dmgClampMax);
                dict.TryGetInt(dmgCountKey, out _dmgCount);
                dict.TryGetFloat(weightKey, out _weight);
                dict.TryGetFloat(speedBonusKey, out _speedBonus);
                dict.TryGetFloat(visionRangeKey, out _visionRange);
                dict.TryGetFloat(atkRangeKey, out _atkRange);
                dict.TryGetFloat(atkSpeedKey, out _atkSpeed);
                dict.TryGetFloat(weightRobRateKey, out _weightRobRate);
                dict.TryGetFloat(aggroKey, out _aggro);
                dict.TryGetFloat(counterKey, out _counter);
                dict.TryGetFloat(reflectKey, out _reflect);
                dict.TryGetFloat(stunKey, out _stun);
                dict.TryGetFloat(criticalKey, out _critical);
                dict.TryGetFloat(poisonKey, out _poison);
                dict.TryGetFloat(bleedKey, out _bleed);
                dict.TryGetFloat(slowKey, out _slow);
                dict.TryGetFloat(pierceKey, out _pierce);
                dict.TryGetFloat(flameKey, out _flame);
                dict.TryGetString(typeNameKey, out _typeName);
                dict.TryGetString(nickNameKey, out _nickName);
                dict.TryGetString(spawnLevelKey, out _spawnLevel);
                dict.TryGetString(shapePathKey, out _shapePath);
                dict.TryGetString(animPathKey, out _animPath);
                dict.TryGetString(fsmPathKey, out _fsmPath);
                dict.TryGetVector3(localScaleKey, out _localScale);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _isObstacle = GDEDataManager.GetBool(_key, isObstacleKey, _isObstacle);
            _scaleByWeight = GDEDataManager.GetBool(_key, scaleByWeightKey, _scaleByWeight);
            _spawnHeight = GDEDataManager.GetInt(_key, spawnHeightKey, _spawnHeight);
            _healthPoint = GDEDataManager.GetInt(_key, healthPointKey, _healthPoint);
            _atkBonus = GDEDataManager.GetInt(_key, atkBonusKey, _atkBonus);
            _defBonus = GDEDataManager.GetInt(_key, defBonusKey, _defBonus);
            _dmgClampMin = GDEDataManager.GetInt(_key, dmgClampMinKey, _dmgClampMin);
            _dmgClampMax = GDEDataManager.GetInt(_key, dmgClampMaxKey, _dmgClampMax);
            _dmgCount = GDEDataManager.GetInt(_key, dmgCountKey, _dmgCount);
            _weight = GDEDataManager.GetFloat(_key, weightKey, _weight);
            _speedBonus = GDEDataManager.GetFloat(_key, speedBonusKey, _speedBonus);
            _visionRange = GDEDataManager.GetFloat(_key, visionRangeKey, _visionRange);
            _atkRange = GDEDataManager.GetFloat(_key, atkRangeKey, _atkRange);
            _atkSpeed = GDEDataManager.GetFloat(_key, atkSpeedKey, _atkSpeed);
            _weightRobRate = GDEDataManager.GetFloat(_key, weightRobRateKey, _weightRobRate);
            _aggro = GDEDataManager.GetFloat(_key, aggroKey, _aggro);
            _counter = GDEDataManager.GetFloat(_key, counterKey, _counter);
            _reflect = GDEDataManager.GetFloat(_key, reflectKey, _reflect);
            _stun = GDEDataManager.GetFloat(_key, stunKey, _stun);
            _critical = GDEDataManager.GetFloat(_key, criticalKey, _critical);
            _poison = GDEDataManager.GetFloat(_key, poisonKey, _poison);
            _bleed = GDEDataManager.GetFloat(_key, bleedKey, _bleed);
            _slow = GDEDataManager.GetFloat(_key, slowKey, _slow);
            _pierce = GDEDataManager.GetFloat(_key, pierceKey, _pierce);
            _flame = GDEDataManager.GetFloat(_key, flameKey, _flame);
            _typeName = GDEDataManager.GetString(_key, typeNameKey, _typeName);
            _nickName = GDEDataManager.GetString(_key, nickNameKey, _nickName);
            _spawnLevel = GDEDataManager.GetString(_key, spawnLevelKey, _spawnLevel);
            _shapePath = GDEDataManager.GetString(_key, shapePathKey, _shapePath);
            _animPath = GDEDataManager.GetString(_key, animPathKey, _animPath);
            _fsmPath = GDEDataManager.GetString(_key, fsmPathKey, _fsmPath);
            _localScale = GDEDataManager.GetVector3(_key, localScaleKey, _localScale);
        }

        public GDENpcData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDENpcData newClone = new GDENpcData(newKey);

            newClone.isObstacle = isObstacle;
            newClone.scaleByWeight = scaleByWeight;
            newClone.spawnHeight = spawnHeight;
            newClone.healthPoint = healthPoint;
            newClone.atkBonus = atkBonus;
            newClone.defBonus = defBonus;
            newClone.dmgClampMin = dmgClampMin;
            newClone.dmgClampMax = dmgClampMax;
            newClone.dmgCount = dmgCount;
            newClone.weight = weight;
            newClone.speedBonus = speedBonus;
            newClone.visionRange = visionRange;
            newClone.atkRange = atkRange;
            newClone.atkSpeed = atkSpeed;
            newClone.weightRobRate = weightRobRate;
            newClone.aggro = aggro;
            newClone.counter = counter;
            newClone.reflect = reflect;
            newClone.stun = stun;
            newClone.critical = critical;
            newClone.poison = poison;
            newClone.bleed = bleed;
            newClone.slow = slow;
            newClone.pierce = pierce;
            newClone.flame = flame;
            newClone.typeName = typeName;
            newClone.nickName = nickName;
            newClone.spawnLevel = spawnLevel;
            newClone.shapePath = shapePath;
            newClone.animPath = animPath;
            newClone.fsmPath = fsmPath;
            newClone.localScale = localScale;

            return newClone;
		}

        public GDENpcData DeepClone()
		{
			GDENpcData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_isObstacle()
        {
            GDEDataManager.ResetToDefault(_key, isObstacleKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(isObstacleKey, out _isObstacle);
        }

        public void Reset_scaleByWeight()
        {
            GDEDataManager.ResetToDefault(_key, scaleByWeightKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(scaleByWeightKey, out _scaleByWeight);
        }

        public void Reset_spawnHeight()
        {
            GDEDataManager.ResetToDefault(_key, spawnHeightKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(spawnHeightKey, out _spawnHeight);
        }

        public void Reset_healthPoint()
        {
            GDEDataManager.ResetToDefault(_key, healthPointKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(healthPointKey, out _healthPoint);
        }

        public void Reset_atkBonus()
        {
            GDEDataManager.ResetToDefault(_key, atkBonusKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(atkBonusKey, out _atkBonus);
        }

        public void Reset_defBonus()
        {
            GDEDataManager.ResetToDefault(_key, defBonusKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(defBonusKey, out _defBonus);
        }

        public void Reset_dmgClampMin()
        {
            GDEDataManager.ResetToDefault(_key, dmgClampMinKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(dmgClampMinKey, out _dmgClampMin);
        }

        public void Reset_dmgClampMax()
        {
            GDEDataManager.ResetToDefault(_key, dmgClampMaxKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(dmgClampMaxKey, out _dmgClampMax);
        }

        public void Reset_dmgCount()
        {
            GDEDataManager.ResetToDefault(_key, dmgCountKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(dmgCountKey, out _dmgCount);
        }

        public void Reset_weight()
        {
            GDEDataManager.ResetToDefault(_key, weightKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(weightKey, out _weight);
        }

        public void Reset_speedBonus()
        {
            GDEDataManager.ResetToDefault(_key, speedBonusKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(speedBonusKey, out _speedBonus);
        }

        public void Reset_visionRange()
        {
            GDEDataManager.ResetToDefault(_key, visionRangeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(visionRangeKey, out _visionRange);
        }

        public void Reset_atkRange()
        {
            GDEDataManager.ResetToDefault(_key, atkRangeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(atkRangeKey, out _atkRange);
        }

        public void Reset_atkSpeed()
        {
            GDEDataManager.ResetToDefault(_key, atkSpeedKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(atkSpeedKey, out _atkSpeed);
        }

        public void Reset_weightRobRate()
        {
            GDEDataManager.ResetToDefault(_key, weightRobRateKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(weightRobRateKey, out _weightRobRate);
        }

        public void Reset_aggro()
        {
            GDEDataManager.ResetToDefault(_key, aggroKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(aggroKey, out _aggro);
        }

        public void Reset_counter()
        {
            GDEDataManager.ResetToDefault(_key, counterKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(counterKey, out _counter);
        }

        public void Reset_reflect()
        {
            GDEDataManager.ResetToDefault(_key, reflectKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(reflectKey, out _reflect);
        }

        public void Reset_stun()
        {
            GDEDataManager.ResetToDefault(_key, stunKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(stunKey, out _stun);
        }

        public void Reset_critical()
        {
            GDEDataManager.ResetToDefault(_key, criticalKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(criticalKey, out _critical);
        }

        public void Reset_poison()
        {
            GDEDataManager.ResetToDefault(_key, poisonKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(poisonKey, out _poison);
        }

        public void Reset_bleed()
        {
            GDEDataManager.ResetToDefault(_key, bleedKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(bleedKey, out _bleed);
        }

        public void Reset_slow()
        {
            GDEDataManager.ResetToDefault(_key, slowKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(slowKey, out _slow);
        }

        public void Reset_pierce()
        {
            GDEDataManager.ResetToDefault(_key, pierceKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(pierceKey, out _pierce);
        }

        public void Reset_flame()
        {
            GDEDataManager.ResetToDefault(_key, flameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(flameKey, out _flame);
        }

        public void Reset_typeName()
        {
            GDEDataManager.ResetToDefault(_key, typeNameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(typeNameKey, out _typeName);
        }

        public void Reset_nickName()
        {
            GDEDataManager.ResetToDefault(_key, nickNameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(nickNameKey, out _nickName);
        }

        public void Reset_spawnLevel()
        {
            GDEDataManager.ResetToDefault(_key, spawnLevelKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(spawnLevelKey, out _spawnLevel);
        }

        public void Reset_shapePath()
        {
            GDEDataManager.ResetToDefault(_key, shapePathKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(shapePathKey, out _shapePath);
        }

        public void Reset_animPath()
        {
            GDEDataManager.ResetToDefault(_key, animPathKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(animPathKey, out _animPath);
        }

        public void Reset_fsmPath()
        {
            GDEDataManager.ResetToDefault(_key, fsmPathKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(fsmPathKey, out _fsmPath);
        }

        public void Reset_localScale()
        {
            GDEDataManager.ResetToDefault(_key, localScaleKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetVector3(localScaleKey, out _localScale);
        }

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, typeNameKey);
            GDEDataManager.ResetToDefault(_key, nickNameKey);
            GDEDataManager.ResetToDefault(_key, isObstacleKey);
            GDEDataManager.ResetToDefault(_key, weightKey);
            GDEDataManager.ResetToDefault(_key, scaleByWeightKey);
            GDEDataManager.ResetToDefault(_key, localScaleKey);
            GDEDataManager.ResetToDefault(_key, spawnLevelKey);
            GDEDataManager.ResetToDefault(_key, spawnHeightKey);
            GDEDataManager.ResetToDefault(_key, shapePathKey);
            GDEDataManager.ResetToDefault(_key, animPathKey);
            GDEDataManager.ResetToDefault(_key, fsmPathKey);
            GDEDataManager.ResetToDefault(_key, healthPointKey);
            GDEDataManager.ResetToDefault(_key, speedBonusKey);
            GDEDataManager.ResetToDefault(_key, visionRangeKey);
            GDEDataManager.ResetToDefault(_key, atkRangeKey);
            GDEDataManager.ResetToDefault(_key, atkSpeedKey);
            GDEDataManager.ResetToDefault(_key, atkBonusKey);
            GDEDataManager.ResetToDefault(_key, defBonusKey);
            GDEDataManager.ResetToDefault(_key, dmgClampMinKey);
            GDEDataManager.ResetToDefault(_key, dmgClampMaxKey);
            GDEDataManager.ResetToDefault(_key, dmgCountKey);
            GDEDataManager.ResetToDefault(_key, weightRobRateKey);
            GDEDataManager.ResetToDefault(_key, aggroKey);
            GDEDataManager.ResetToDefault(_key, counterKey);
            GDEDataManager.ResetToDefault(_key, reflectKey);
            GDEDataManager.ResetToDefault(_key, stunKey);
            GDEDataManager.ResetToDefault(_key, criticalKey);
            GDEDataManager.ResetToDefault(_key, poisonKey);
            GDEDataManager.ResetToDefault(_key, bleedKey);
            GDEDataManager.ResetToDefault(_key, slowKey);
            GDEDataManager.ResetToDefault(_key, pierceKey);
            GDEDataManager.ResetToDefault(_key, flameKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
