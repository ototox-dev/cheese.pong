// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEWeaponData : IGDEData
    {
        static string localScaleKey = "localScale";
		float _localScale;
        public float localScale
        {
            get { return _localScale; }
            set {
                if (_localScale != value)
                {
                    _localScale = value;
					GDEDataManager.SetFloat(_key, localScaleKey, _localScale);
                }
            }
        }

        static string aggroKey = "aggro";
		float _aggro;
        public float aggro
        {
            get { return _aggro; }
            set {
                if (_aggro != value)
                {
                    _aggro = value;
					GDEDataManager.SetFloat(_key, aggroKey, _aggro);
                }
            }
        }

        static string counterKey = "counter";
		float _counter;
        public float counter
        {
            get { return _counter; }
            set {
                if (_counter != value)
                {
                    _counter = value;
					GDEDataManager.SetFloat(_key, counterKey, _counter);
                }
            }
        }

        static string reflectKey = "reflect";
		float _reflect;
        public float reflect
        {
            get { return _reflect; }
            set {
                if (_reflect != value)
                {
                    _reflect = value;
					GDEDataManager.SetFloat(_key, reflectKey, _reflect);
                }
            }
        }

        static string stunKey = "stun";
		float _stun;
        public float stun
        {
            get { return _stun; }
            set {
                if (_stun != value)
                {
                    _stun = value;
					GDEDataManager.SetFloat(_key, stunKey, _stun);
                }
            }
        }

        static string criticalKey = "critical";
		float _critical;
        public float critical
        {
            get { return _critical; }
            set {
                if (_critical != value)
                {
                    _critical = value;
					GDEDataManager.SetFloat(_key, criticalKey, _critical);
                }
            }
        }

        static string poisonKey = "poison";
		float _poison;
        public float poison
        {
            get { return _poison; }
            set {
                if (_poison != value)
                {
                    _poison = value;
					GDEDataManager.SetFloat(_key, poisonKey, _poison);
                }
            }
        }

        static string bleedKey = "bleed";
		float _bleed;
        public float bleed
        {
            get { return _bleed; }
            set {
                if (_bleed != value)
                {
                    _bleed = value;
					GDEDataManager.SetFloat(_key, bleedKey, _bleed);
                }
            }
        }

        static string slowKey = "slow";
		float _slow;
        public float slow
        {
            get { return _slow; }
            set {
                if (_slow != value)
                {
                    _slow = value;
					GDEDataManager.SetFloat(_key, slowKey, _slow);
                }
            }
        }

        static string pierceKey = "pierce";
		float _pierce;
        public float pierce
        {
            get { return _pierce; }
            set {
                if (_pierce != value)
                {
                    _pierce = value;
					GDEDataManager.SetFloat(_key, pierceKey, _pierce);
                }
            }
        }

        static string flameKey = "flame";
		float _flame;
        public float flame
        {
            get { return _flame; }
            set {
                if (_flame != value)
                {
                    _flame = value;
					GDEDataManager.SetFloat(_key, flameKey, _flame);
                }
            }
        }

        static string weaponNameKey = "weaponName";
		string _weaponName;
        public string weaponName
        {
            get { return _weaponName; }
            set {
                if (_weaponName != value)
                {
                    _weaponName = value;
					GDEDataManager.SetString(_key, weaponNameKey, _weaponName);
                }
            }
        }

        static string typeNameKey = "typeName";
		string _typeName;
        public string typeName
        {
            get { return _typeName; }
            set {
                if (_typeName != value)
                {
                    _typeName = value;
					GDEDataManager.SetString(_key, typeNameKey, _typeName);
                }
            }
        }

        static string raceNameKey = "raceName";
		string _raceName;
        public string raceName
        {
            get { return _raceName; }
            set {
                if (_raceName != value)
                {
                    _raceName = value;
					GDEDataManager.SetString(_key, raceNameKey, _raceName);
                }
            }
        }

        static string shapePathKey = "shapePath";
		string _shapePath;
        public string shapePath
        {
            get { return _shapePath; }
            set {
                if (_shapePath != value)
                {
                    _shapePath = value;
					GDEDataManager.SetString(_key, shapePathKey, _shapePath);
                }
            }
        }

        static string projectileKeyKey = "projectileKey";
		GDEProjectileData _projectileKey;
        public GDEProjectileData projectileKey
        {
            get { return _projectileKey; }
            set {
                if (_projectileKey != value)
                {
                    _projectileKey = value;
					GDEDataManager.SetCustom(_key, projectileKeyKey, _projectileKey);
                }
            }
        }
        static string extraProjectileKeyKey = "extraProjectileKey";
		GDEProjectileData _extraProjectileKey;
        public GDEProjectileData extraProjectileKey
        {
            get { return _extraProjectileKey; }
            set {
                if (_extraProjectileKey != value)
                {
                    _extraProjectileKey = value;
					GDEDataManager.SetCustom(_key, extraProjectileKeyKey, _extraProjectileKey);
                }
            }
        }

        public GDEWeaponData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Weapon");
			
            dict.Merge(true, localScale.ToGDEDict(localScaleKey));
            dict.Merge(true, aggro.ToGDEDict(aggroKey));
            dict.Merge(true, counter.ToGDEDict(counterKey));
            dict.Merge(true, reflect.ToGDEDict(reflectKey));
            dict.Merge(true, stun.ToGDEDict(stunKey));
            dict.Merge(true, critical.ToGDEDict(criticalKey));
            dict.Merge(true, poison.ToGDEDict(poisonKey));
            dict.Merge(true, bleed.ToGDEDict(bleedKey));
            dict.Merge(true, slow.ToGDEDict(slowKey));
            dict.Merge(true, pierce.ToGDEDict(pierceKey));
            dict.Merge(true, flame.ToGDEDict(flameKey));
            dict.Merge(true, weaponName.ToGDEDict(weaponNameKey));
            dict.Merge(true, typeName.ToGDEDict(typeNameKey));
            dict.Merge(true, raceName.ToGDEDict(raceNameKey));
            dict.Merge(true, shapePath.ToGDEDict(shapePathKey));

            dict.Merge(true, projectileKey.ToGDEDict(projectileKeyKey));
            dict.Merge(true, extraProjectileKey.ToGDEDict(extraProjectileKeyKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
            GDEDataManager.UpdateItem(projectileKey, rebuildKeyList);
            projectileKey.UpdateCustomItems(rebuildKeyList);
            GDEDataManager.UpdateItem(extraProjectileKey, rebuildKeyList);
            extraProjectileKey.UpdateCustomItems(rebuildKeyList);
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetFloat(localScaleKey, out _localScale);
                dict.TryGetFloat(aggroKey, out _aggro);
                dict.TryGetFloat(counterKey, out _counter);
                dict.TryGetFloat(reflectKey, out _reflect);
                dict.TryGetFloat(stunKey, out _stun);
                dict.TryGetFloat(criticalKey, out _critical);
                dict.TryGetFloat(poisonKey, out _poison);
                dict.TryGetFloat(bleedKey, out _bleed);
                dict.TryGetFloat(slowKey, out _slow);
                dict.TryGetFloat(pierceKey, out _pierce);
                dict.TryGetFloat(flameKey, out _flame);
                dict.TryGetString(weaponNameKey, out _weaponName);
                dict.TryGetString(typeNameKey, out _typeName);
                dict.TryGetString(raceNameKey, out _raceName);
                dict.TryGetString(shapePathKey, out _shapePath);

                string customDataKey;
                dict.TryGetString(projectileKeyKey, out customDataKey);
				_projectileKey = new GDEProjectileData(customDataKey);
                dict.TryGetString(extraProjectileKeyKey, out customDataKey);
				_extraProjectileKey = new GDEProjectileData(customDataKey);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _localScale = GDEDataManager.GetFloat(_key, localScaleKey, _localScale);
            _aggro = GDEDataManager.GetFloat(_key, aggroKey, _aggro);
            _counter = GDEDataManager.GetFloat(_key, counterKey, _counter);
            _reflect = GDEDataManager.GetFloat(_key, reflectKey, _reflect);
            _stun = GDEDataManager.GetFloat(_key, stunKey, _stun);
            _critical = GDEDataManager.GetFloat(_key, criticalKey, _critical);
            _poison = GDEDataManager.GetFloat(_key, poisonKey, _poison);
            _bleed = GDEDataManager.GetFloat(_key, bleedKey, _bleed);
            _slow = GDEDataManager.GetFloat(_key, slowKey, _slow);
            _pierce = GDEDataManager.GetFloat(_key, pierceKey, _pierce);
            _flame = GDEDataManager.GetFloat(_key, flameKey, _flame);
            _weaponName = GDEDataManager.GetString(_key, weaponNameKey, _weaponName);
            _typeName = GDEDataManager.GetString(_key, typeNameKey, _typeName);
            _raceName = GDEDataManager.GetString(_key, raceNameKey, _raceName);
            _shapePath = GDEDataManager.GetString(_key, shapePathKey, _shapePath);

            _projectileKey = GDEDataManager.GetCustom(_key, projectileKeyKey, _projectileKey);
            _extraProjectileKey = GDEDataManager.GetCustom(_key, extraProjectileKeyKey, _extraProjectileKey);
        }

        public GDEWeaponData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEWeaponData newClone = new GDEWeaponData(newKey);

            newClone.localScale = localScale;
            newClone.aggro = aggro;
            newClone.counter = counter;
            newClone.reflect = reflect;
            newClone.stun = stun;
            newClone.critical = critical;
            newClone.poison = poison;
            newClone.bleed = bleed;
            newClone.slow = slow;
            newClone.pierce = pierce;
            newClone.flame = flame;
            newClone.weaponName = weaponName;
            newClone.typeName = typeName;
            newClone.raceName = raceName;
            newClone.shapePath = shapePath;

            newClone.projectileKey = projectileKey;
            newClone.extraProjectileKey = extraProjectileKey;

            return newClone;
		}

        public GDEWeaponData DeepClone()
		{
			GDEWeaponData newClone = ShallowClone();
            newClone.projectileKey = projectileKey.DeepClone();
            newClone.extraProjectileKey = extraProjectileKey.DeepClone();
            return newClone;
		}

        public void Reset_localScale()
        {
            GDEDataManager.ResetToDefault(_key, localScaleKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(localScaleKey, out _localScale);
        }

        public void Reset_aggro()
        {
            GDEDataManager.ResetToDefault(_key, aggroKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(aggroKey, out _aggro);
        }

        public void Reset_counter()
        {
            GDEDataManager.ResetToDefault(_key, counterKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(counterKey, out _counter);
        }

        public void Reset_reflect()
        {
            GDEDataManager.ResetToDefault(_key, reflectKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(reflectKey, out _reflect);
        }

        public void Reset_stun()
        {
            GDEDataManager.ResetToDefault(_key, stunKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(stunKey, out _stun);
        }

        public void Reset_critical()
        {
            GDEDataManager.ResetToDefault(_key, criticalKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(criticalKey, out _critical);
        }

        public void Reset_poison()
        {
            GDEDataManager.ResetToDefault(_key, poisonKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(poisonKey, out _poison);
        }

        public void Reset_bleed()
        {
            GDEDataManager.ResetToDefault(_key, bleedKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(bleedKey, out _bleed);
        }

        public void Reset_slow()
        {
            GDEDataManager.ResetToDefault(_key, slowKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(slowKey, out _slow);
        }

        public void Reset_pierce()
        {
            GDEDataManager.ResetToDefault(_key, pierceKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(pierceKey, out _pierce);
        }

        public void Reset_flame()
        {
            GDEDataManager.ResetToDefault(_key, flameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(flameKey, out _flame);
        }

        public void Reset_weaponName()
        {
            GDEDataManager.ResetToDefault(_key, weaponNameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(weaponNameKey, out _weaponName);
        }

        public void Reset_typeName()
        {
            GDEDataManager.ResetToDefault(_key, typeNameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(typeNameKey, out _typeName);
        }

        public void Reset_raceName()
        {
            GDEDataManager.ResetToDefault(_key, raceNameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(raceNameKey, out _raceName);
        }

        public void Reset_shapePath()
        {
            GDEDataManager.ResetToDefault(_key, shapePathKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(shapePathKey, out _shapePath);
        }

        public void Reset_projectileKey()
		{
			GDEDataManager.ResetToDefault(_key, projectileKeyKey);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(projectileKeyKey, out customDataKey);
			_projectileKey = new GDEProjectileData(customDataKey);

			projectileKey.ResetAll();
		}
        public void Reset_extraProjectileKey()
		{
			GDEDataManager.ResetToDefault(_key, extraProjectileKeyKey);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(extraProjectileKeyKey, out customDataKey);
			_extraProjectileKey = new GDEProjectileData(customDataKey);

			extraProjectileKey.ResetAll();
		}

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, weaponNameKey);
            GDEDataManager.ResetToDefault(_key, typeNameKey);
            GDEDataManager.ResetToDefault(_key, raceNameKey);
            GDEDataManager.ResetToDefault(_key, shapePathKey);
            GDEDataManager.ResetToDefault(_key, localScaleKey);
            GDEDataManager.ResetToDefault(_key, aggroKey);
            GDEDataManager.ResetToDefault(_key, counterKey);
            GDEDataManager.ResetToDefault(_key, reflectKey);
            GDEDataManager.ResetToDefault(_key, stunKey);
            GDEDataManager.ResetToDefault(_key, criticalKey);
            GDEDataManager.ResetToDefault(_key, poisonKey);
            GDEDataManager.ResetToDefault(_key, bleedKey);
            GDEDataManager.ResetToDefault(_key, slowKey);
            GDEDataManager.ResetToDefault(_key, pierceKey);
            GDEDataManager.ResetToDefault(_key, flameKey);
            GDEDataManager.ResetToDefault(_key, projectileKeyKey);
            GDEDataManager.ResetToDefault(_key, extraProjectileKeyKey);

            Reset_projectileKey();
            Reset_extraProjectileKey();

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
